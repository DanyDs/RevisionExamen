import java.util.Enumeration;
import java.util.Vector;

public class Customer {

	private MovieRegular data = new MovieRegular(new Vector());

	public Customer(String customerName) {
		this.data.customerName = customerName;
	}

	public void addRental(Rental arg) {
		data.rentals.addElement(arg);
	}

	public String getName() {
		return data.customerName;
	}

	public String generateRenterInformation() {
		data.totalAmount = 0;
		data.frequentRenterPoints = 0;
		Enumeration rentals = this.data.rentals.elements();
		String result = addRenterName();

		result = getResultsForMovies(rentals, result);

		// add footer lines
		result = addFooterLines(result);

		return result;
	}

	private String getResultsForMovies(Enumeration rentals, String result) {
		while (rentals.hasMoreElements()) {
			double thisAmount = 0;
			Rental each = (Rental) rentals.nextElement();

			//determine amounts for each line
			thisAmount = calculatePriceForMovie(thisAmount, each);

			// add frequent renter points
			addFrequentRenterPoints();
			// add bonus for a two day new release rental
			addBonusForTwoDaysNewRelease(each);

			// show figures for this rental
			result = addMovieTitleAndAmount(result, thisAmount, each);
			data.totalAmount += thisAmount;
		}
		return result;
	}

	private void addBonusForTwoDaysNewRelease(Rental each) {
		if ((each.getMovie().getPriceCode() == Movie.NEW_RELEASE) && each.getDaysRented() > 1)
			addFrequentRenterPoints();
	}

	private String addMovieTitleAndAmount(String result, double thisAmount, Rental each) {
		result += "\t" + each.getMovie().getTitle() + "\t" + String.valueOf(thisAmount) + "\n";
		return result;
	}

	private double calculatePriceForMovie(double thisAmount, Rental each) {
		switch (each.getMovie().getPriceCode()) {
		case Movie.REGULAR:
			thisAmount += 2;
			if (each.getDaysRented() > 2)
				thisAmount += (each.getDaysRented() - 2) * 1.5;
			break;
		case Movie.NEW_RELEASE:
			thisAmount += each.getDaysRented() * 3;
			break;
		case Movie.CHILDRENS:
			thisAmount += 1.5;
			if (each.getDaysRented() > 3)
				thisAmount += (each.getDaysRented() - 3) * 1.5;
			break;
		}
		return thisAmount;
	}

	private String addFooterLines(String result) {
		result += "Amount owed is " + String.valueOf(data.totalAmount) + "\n";
		result += "You earned " + String.valueOf(data.frequentRenterPoints) + " frequent renter points";
		return result;
	}

	private void addFrequentRenterPoints() {
		data.frequentRenterPoints++;
	}

	private String addRenterName() {
		String result = "Rental Record for " + getName() + "\n";
		return result;
	}

	public double getTotal() {
		return data.totalAmount;
	}

	public int getFrequentRenterPoints() {
		return data.frequentRenterPoints;
	}
}
